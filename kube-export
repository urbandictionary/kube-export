#!/usr/bin/env inlein

'{:dependencies [[org.clojure/clojure "1.8.0"] [reply "0.3.7"]
                 [io.forward/yaml "1.0.5"]]}

(require '[clojure.java.shell :refer [sh]]
         '[yaml.core :as yaml]
         '[clojure.walk :refer [postwalk]]
         '[clojure.java.io :refer [make-parents]])

(defn walker
  [item]
  (if (map? item)
    (dissoc item
            :creationTimestamp :generation
            :resourceVersion :selfLink
            :uid :clusterIP
            :terminationMessagePath :dnsPolicy
            :status :terminationGracePeriodSeconds)
    item))

(defn remove-keys [item] (postwalk walker item))

(defn to-yaml
  [item]
  (yaml/generate-string item :dumper-options {:flow-style :block}))

(defn spit-p
  [contents file]
  (make-parents file)
  (println "Writing" file)
  (spit file contents))

(defn kubectl-get-all
  []
  (-> (sh "kubectl" "get" "-o=yaml" "rc,service,daemonset,configmap")
      :out
      yaml/parse-string
      :items))

(defn apiserver-component?
  [service]
  (= "apiserver" (get-in service [:metadata :labels :component])))

(defn write-item
  [item]
  (spit-p (to-yaml (remove-keys item))
          (format "%s/%s.yaml" (:kind item) (:name (:metadata item)))))

(defn write-configmap
  [item]
  (doseq [[filename content] (seq (:data item))]
    (spit-p content
            (format "%s/%s/%s"
                    (:kind item)
                    (:name (:metadata item))
                    (name filename)))))

(defn write
  [item]
  (case (:kind item) "ConfigMap" (write-configmap item) (write-item item)))

(doall (->> (kubectl-get-all)
            (remove apiserver-component?)
            (map write)))

#_(reply.ReplyMain/main (into-array String ["--standalone"]))

(shutdown-agents)
