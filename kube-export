#!/usr/bin/env inlein

'{:dependencies [[org.clojure/clojure "1.8.0"] [reply "0.3.7"]
                 [io.forward/yaml "1.0.5"]]}

(require '[clojure.java.shell :refer [sh]]
         '[yaml.core :as yaml]
         '[clojure.walk :refer [postwalk]]
         '[clojure.java.io :refer [make-parents]])

(def keys-to-remove
  [:creationTimestamp :generation :resourceVersion :selfLink :uid :clusterIP
   :terminationMessagePath :dnsPolicy :status :terminationGracePeriodSeconds])

(defn remove-keys
  [item]
  (let [walker #(if (map? %) (apply dissoc % keys-to-remove) %)]
    (postwalk walker item)))

(defn to-yaml
  [item]
  (yaml/generate-string item :dumper-options {:flow-style :block}))

(defn spit-p
  [contents file]
  (make-parents file)
  (println "Writing" file)
  (spit file contents))

(defn kubectl-get-all
  []
  (-> (sh "kubectl" "get" "-o=yaml" "rc,service,daemonset,configmap")
      :out
      yaml/parse-string
      :items))

(defn skip-item?
  [item]
  (= "apiserver" (get-in item [:metadata :labels :component])))

(defn write-item
  [item]
  (spit-p (to-yaml (remove-keys item))
          (format "%s/%s.yaml" (:kind item) (:name (:metadata item)))))

(defn write-configmap
  [item]
  (doseq [[filename content] (seq (:data item))]
    (spit-p content
            (format "%s/%s/%s"
                    (:kind item)
                    (:name (:metadata item))
                    (name filename)))))

(defn write
  [item]
  ((if (= "ConfigMap" (:kind item)) write-configmap write-item) item))

(doall (->> (kubectl-get-all)
            (remove skip-item?)
            (map write)))

#_(reply.ReplyMain/main (into-array String ["--standalone"]))

(shutdown-agents)
