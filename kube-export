(require '[planck.shell :refer [sh]]
         '[cljsjs.js-yaml]
         '[planck.core :refer [slurp spit]]
         '[clojure.walk :refer [postwalk keywordize-keys]])

(def keys-to-remove
  [:creationTimestamp :generation :resourceVersion :selfLink :uid :clusterIP
   :terminationMessagePath :dnsPolicy :status :terminationGracePeriodSeconds])

(defn remove-keys
  [item]
  (let [walker #(if (map? %) (apply dissoc % keys-to-remove) %)]
    (postwalk walker item)))

(defn to-yaml
  [item]
  (.safeDump js/jsyaml (clj->js item)))
  
(defn from-yaml
  [string]
  (keywordize-keys (js->clj (.safeLoad js/jsyaml string))))

(defn spit-p
  [contents dir file]
  (sh "mkdir" "-p" dir)
  (println "Writing" file)
  (spit (str dir "/" file) contents))

(defn kubectl-get-all
  []
  (-> (sh "kubectl" "get" "-o=yaml" "all")
      :out
      from-yaml
      :items))

(defn skip-item?
  [item]
  (or (#{"Pod" "Secret" "ReplicaSet" "DaemonSet"} (:kind item))
      (= "apiserver" (get-in item [:metadata :labels :component]))))

(defn write
  [item]
  (spit-p (to-yaml (remove-keys item))
          (:kind item)
          (str (:name (:metadata item)) ".yaml")))

(doall (->> (kubectl-get-all)
            (remove skip-item?)
            (map write)))